import json
import os

import pytest
from django.conf import settings
from django.contrib.auth.models import User
from pathlib import Path
from rest_framework import status
from rest_framework.authtoken.models import Token
from rest_framework.test import APIClient

from api.v1.serializers import (
    USER_EMAIL_MAX_LEN, USER_FIRST_NAME_MAX_LEN, USER_PASSWORD_MAX_LEN,
    USER_SECOND_NAME_MAX_LEN, USER_USERNAME_MAX_LEN)
from footgram_app.models import (
    RECIPES_MEDIA_ROOT,
    Ingredients, Recipes, Subscriptions, Tags)
from footgram_app.tests.test_models import (
    create_ingredient_obj, create_recipe_ingredient_obj, create_recipe_obj,
    create_recipe_tag_obj, create_tag_obj, create_user_obj,
    create_user_obj_with_hash)

URL_API_V1: str = '/api/v1/'
URL_AUTH: str = f'{URL_API_V1}auth/token/'
URL_AUTH_LOGIN: str = f'{URL_AUTH}login/'
URL_AUTH_LOGOUT: str = f'{URL_AUTH}logout/'
URL_RECIPES: str = f'{URL_API_V1}recipes/'
URL_TAGS: str = f'{URL_API_V1}tags/'
URL_USERS: str = f'{URL_API_V1}users/'
URL_USERS_ME: str = f'{URL_USERS}me/'
URL_USERS_SET_PASSWORD: str = f'{URL_USERS}set_password/'

TEST_FIXTURES_OBJ_COUNT: int = 3


def anon_client() -> APIClient:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    return APIClient()


def auth_client() -> APIClient:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤."""
    auth_client = APIClient()
    auth_client.force_authenticate(user=None)
    return auth_client


@pytest.fixture()
def create_recipes_users() -> None:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤.
    –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ—Ä–∞–º–∏ —ç—Ç–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    for i in range(1, TEST_FIXTURES_OBJ_COUNT+1):
        user: User = create_user_obj(num=i)
        create_recipe_obj(num=i, user=user)
    return


@pytest.fixture()
def create_recipes_ingredients_tags_users() -> None:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤.
    –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:
        - –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã;
        - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;
        - —Ç–µ–≥–∏.
    –ó–∞—Ç–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–≤—è–∑—ã–≤–∞—é—Ç—Å—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ–ª–µ–π "Recipes".
    """
    for i in range(1, TEST_FIXTURES_OBJ_COUNT+1):
        user: User = create_user_obj(num=i)
        recipe: Recipes = create_recipe_obj(num=i, user=user)
        tag: Tags = create_tag_obj(num=i)
        create_recipe_tag_obj(recipe=recipe, tag=tag)
        ingredient: Ingredients = create_ingredient_obj(num=i)
        create_recipe_ingredient_obj(
            amount=i, ingredient=ingredient, recipe=recipe)
    return


@pytest.fixture()
def create_tags() -> None:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    for i in range(1, TEST_FIXTURES_OBJ_COUNT+1):
        create_tag_obj(num=i)
    return


@pytest.fixture()
def create_users() -> None:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    for i in range(1, TEST_FIXTURES_OBJ_COUNT+1):
        create_user_obj(num=i)
    return


@pytest.mark.django_db
class TestCustomUserViewSet():
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç –≤—å—é-—Å–µ—Ç–∞ "CustomUserViewSet"."""

    VALID_POST_DATA: dict = {
        'email': f'{"1"*(USER_EMAIL_MAX_LEN-len("@email.com"))}@email.com',
        'username': f'{"1"*USER_USERNAME_MAX_LEN}',
        'first_name': f'{"1"*USER_FIRST_NAME_MAX_LEN}',
        'last_name': f'{"1"*USER_SECOND_NAME_MAX_LEN}',
        'password': f'{"1"*USER_PASSWORD_MAX_LEN}'}
    VALID_POST_DATA_EXP: dict = {
        'email': f'{"1"*(USER_EMAIL_MAX_LEN-len("@email.com"))}@email.com',
        'id': 1,
        'username': f'{"1"*USER_USERNAME_MAX_LEN}',
        'first_name': f'{"1"*USER_FIRST_NAME_MAX_LEN}',
        'last_name': f'{"1"*USER_SECOND_NAME_MAX_LEN}',
        'is_subscribed': False}
    NON_VALID_POST_DATA_LENGTH: dict = {
        'email': f'{"1"*(USER_EMAIL_MAX_LEN-len("@email.com")+1)}@email.com',
        'username': f'{"1"*(USER_USERNAME_MAX_LEN+1)}',
        'first_name': f'{"1"*(USER_FIRST_NAME_MAX_LEN+1)}',
        'last_name': f'{"1"*(USER_SECOND_NAME_MAX_LEN+1)}',
        'password': f'{"1"*(USER_PASSWORD_MAX_LEN+1)}'}
    NON_VALID_POST_DATA_LENGTH_EXP: dict = {
        'email': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 254 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'username': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'first_name': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'last_name': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'password': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.']}
    NON_VALID_POST_DATA_EMPTY: dict = {}
    NON_VALID_POST_DATA_EMPTY_EXP: dict = {
        'email': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'username': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'first_name': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'last_name': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'password': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.']}
    NON_VALID_POST_DATA_EMAIL: dict = {
        'email': 'None',
        'username': 'test_username',
        'first_name': 'test_first_name',
        'last_name': 'test_last_name',
        'password': 'test_username'}
    NON_VALID_POST_DATA_EMAIL_EXP: dict = {
        'email': ['–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.']}
    NON_VALID_POST_DATA_USERNAME: dict = {
        'email': 'test@email.com',
        'username': '12345!!!üòä',
        'first_name': 'test_first_name',
        'last_name': 'test_last_name',
        'password': 'test_password'}
    NON_VALID_POST_DATA_USERNAME_EXP: dict = {
        'username': [
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "!", "1", "2", "3", "4", "5", "üòä" –≤ –∏–º–µ–Ω–∏ '
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ.']}
    NON_VALID_POST_DATA_EXISTED: dict = {
        'email': 'test_user_email_1@email.com',
        'username': 'test_user_username_1',
        'first_name': 'test_user_first_name_1',
        'last_name': 'test_user_last_name_1',
        'password': 'test_user_password_1'}
    NON_VALID_POST_DATA_EXISTED_EXP: dict = {
        'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'],
        'username': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.']}

    def users_get(self, client: APIClient) -> dict:
        """–°–æ–≤–µ—Ä—à–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫ —Ñ–æ—Ä–º–∞—Ç—É
        –¥–∞–Ω–Ω—ã—Ö Python."""
        response = client.get(URL_USERS)
        assert response.status_code == status.HTTP_200_OK
        return json.loads(response.content)

    def users_post(
            self,
            client: APIClient,
            data: dict[str, any],
            expected_data: dict[str, any],
            expected_status: status,
            expected_users_count: int) -> None:
        """–°–æ–≤–µ—Ä—à–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        response = client.post(
            URL_USERS, json.dumps(data), content_type='application/json')
        assert response.status_code == expected_status
        assert User.objects.all().count() == expected_users_count
        data: dict = json.loads(response.content)
        assert data == expected_data
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_get(self, client_func: APIClient, create_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_users" –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π
        –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        –í –∫–ª–∞—Å—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –í —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑
        —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ "results" –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. –¢–µ—Å—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
        –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ "test_view_sets_pagination"."""
        expected_data: dict[str, any] = {
            'email': 'test_user_email_1@email.com',
            'id': 1,
            'username': 'test_user_username_1',
            'first_name': 'test_user_first_name_1',
            'last_name': 'test_user_last_name_1',
            'is_subscribed': False}
        data: dict = self.users_get(client=client_func())
        results_pagination: dict = data['results']
        assert len(results_pagination) == TEST_FIXTURES_OBJ_COUNT
        assert results_pagination[0] == expected_data
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    @pytest.mark.parametrize('method', ['delete', 'patch', 'put'])
    def test_users_not_allowed_methods(
            self, client_func: APIClient, method) -> None:
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ CRUD –∑–∞–ø—Ä–æ—Å—ã –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/users/":
            - DELETE;
            - PATCH;
            - PUT."""
        client: APIClient = client_func()
        response = getattr(client, method)(URL_TAGS)
        assert response.status_code == status.HTTP_405_METHOD_NOT_ALLOWED
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_post_allow_create(self, client_func: APIClient) -> None:
        """–¢–µ—Å—Ç POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≤–µ–¥–æ–º–æ –≤–∞–ª–∏–¥–Ω—ã–º–∏."""
        self.users_post(
            client=client_func(),
            data=self.VALID_POST_DATA,
            expected_data=self.VALID_POST_DATA_EXP,
            expected_status=status.HTTP_201_CREATED,
            expected_users_count=1)
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    @pytest.mark.parametrize('data, expected_data', [
        (NON_VALID_POST_DATA_EMPTY, NON_VALID_POST_DATA_EMPTY_EXP),
        (NON_VALID_POST_DATA_LENGTH, NON_VALID_POST_DATA_LENGTH_EXP),
        (NON_VALID_POST_DATA_EMAIL, NON_VALID_POST_DATA_EMAIL_EXP),
        (NON_VALID_POST_DATA_USERNAME, NON_VALID_POST_DATA_USERNAME_EXP),
        (NON_VALID_POST_DATA_EXISTED, NON_VALID_POST_DATA_EXISTED_EXP)])
    def test_users_post_field_validation(
            self,
            client_func: APIClient,
            data: dict,
            expected_data: dict,
            create_users) -> None:
        """–¢–µ—Å—Ç POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏."""
        self.users_post(
            client=client_func(),
            data=data,
            expected_data=expected_data,
            expected_status=status.HTTP_400_BAD_REQUEST,
            expected_users_count=TEST_FIXTURES_OBJ_COUNT)
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_pk(self, client_func: APIClient, create_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/{pk}/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_users" –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π
        –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        client: APIClient = client_func()
        response = client.get(f'{URL_USERS}1/')
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        assert data == {
            'email': 'test_user_email_1@email.com',
            'id': 1,
            'username': 'test_user_username_1',
            'first_name': 'test_user_first_name_1',
            'last_name': 'test_user_last_name_1',
            'is_subscribed': False}
        return

    def test_users_pk_subscription(self, create_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/{pk}/" –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_users" –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π
        –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        –ú–æ–¥–µ–ª–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        subscriber: User = User.objects.get(id=1)
        subscription_to: User = User.objects.get(id=2)
        Subscriptions.objects.create(
            subscriber=subscriber,
            subscription_to=subscription_to)
        client: APIClient = auth_client()
        client.force_authenticate(user=subscriber)
        response = client.get(f'{URL_USERS}2/')
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        assert data == {
            'email': 'test_user_email_2@email.com',
            'id': 2,
            'username': 'test_user_username_2',
            'first_name': 'test_user_first_name_2',
            'last_name': 'test_user_last_name_2',
            'is_subscribed': True}
        return

    def test_users_me_anon(self, create_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/me/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        client: APIClient = anon_client()
        response = client.get(URL_USERS_ME)
        assert response.status_code == status.HTTP_401_UNAUTHORIZED
        data: dict = json.loads(response.content)
        assert data == {'detail': '–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.'}
        return

    def test_users_me_auth(self, create_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/me/" –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        test_user: User = User.objects.get(id=1)
        client = APIClient()
        client.force_authenticate(user=test_user)
        response = client.get(URL_USERS_ME)
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        assert data == {
            'email': 'test_user_email_1@email.com',
            'id': 1,
            'username': 'test_user_username_1',
            'first_name': 'test_user_first_name_1',
            'last_name': 'test_user_last_name_1',
            'is_subscribed': False}

    @pytest.mark.parametrize(
        'token, expected_data',
        [(' ', {'detail':
                '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–∫–µ–Ω–∞. '
                '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'}),
         ('100%_non_valid_token', {'detail': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫–µ–Ω.'})])
    def test_users_me_invalid_token(
            self, token: str, expected_data: dict, create_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/me/" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        client: APIClient = anon_client()
        client.credentials(HTTP_AUTHORIZATION=f'Token {token}')
        response = client.get(URL_USERS_ME)
        assert response.status_code == status.HTTP_401_UNAUTHORIZED
        data: dict = json.loads(response.content)
        assert data == expected_data
        return

    def test_users_set_password(self) -> None:
        """–¢–µ—Å—Ç POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/users/set_password/" –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        test_user: User = create_user_obj_with_hash(num=1)
        token, _ = Token.objects.get_or_create(user=test_user)
        client: APIClient = anon_client()
        client.credentials(HTTP_AUTHORIZATION=f'Token {token}')
        NEW_PASSWORD: str = 'some_new_data_pass'
        data: dict = {
            'current_password': 'test_user_password_1',
            'new_password': NEW_PASSWORD}
        response = client.post(
            URL_USERS_SET_PASSWORD,
            json.dumps(data),
            content_type='application/json')
        assert response.status_code == status.HTTP_204_NO_CONTENT

    def test_users_get_token(self) -> None:
        """–¢–µ—Å—Ç POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/auth/token/login/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        test_user: User = create_user_obj_with_hash(num=1)
        token, _ = Token.objects.get_or_create(user=test_user)
        client = anon_client()
        data: dict = {
            'username': 'test_user_username_1',
            'password': 'test_user_password_1'}
        response = client.post(
            URL_AUTH_LOGIN,
            json.dumps(data),
            content_type='application/json')
        assert response.status_code == status.HTTP_200_OK
        content = json.loads(response.content)
        assert content['auth_token'] == token.key


@pytest.mark.django_db
class TestRecipesViewSet():
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç –≤—å—é-—Å–µ—Ç–∞ "RecipesViewSet"."""

    def recipes_post(
            self, client: APIClient, data: dict) -> tuple[status, dict]:
        """–°–æ–≤–µ—Ä—à–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/recipes/" –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –∏ JSON –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ
        –∫ —Ñ–æ—Ä–º–∞—Ç—É Python."""
        response = client.post(
            URL_RECIPES, json.dumps(data), content_type='application/json')
        status_code: status = response.status_code
        data: dict = json.loads(response.content)
        return status_code, data

    @pytest.mark.parametrize('is_admin, status_del_other', [
        (False, status.HTTP_403_FORBIDDEN),
        (True, status.HTTP_204_NO_CONTENT)])
    def test_recipes_delete_allowed_author(
            self,
            is_admin: bool,
            status_del_other: status,
            create_recipes_ingredients_tags_users) -> None:
        """""–¢–µ—Å—Ç DELETE-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/recipes/{pk}/"
        –æ—Ç –ª–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∞-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è —Å–ª—É—á–∞–∏:
            - —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –∞–≤—Ç–æ—Ä—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É);
            - —É–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É).
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_recipes_ingredients_tags_users"
        –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å —Ç–µ–≥–∞–º–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏."""
        ID_AUTHOR: int = 1
        ID_ANOTHER: int = 2
        author_user: User = User.objects.get(id=ID_AUTHOR)
        author_user.is_staff = is_admin
        author_user.save()
        token, _ = Token.objects.get_or_create(user=author_user)
        client: APIClient = anon_client()
        client.credentials(HTTP_AUTHORIZATION=f'Token {token}')
        response = client.delete(f'{URL_RECIPES}{ID_AUTHOR}/')
        assert response.status_code == status.HTTP_204_NO_CONTENT
        response = client.delete(f'{URL_RECIPES}{ID_ANOTHER}/')
        assert response.status_code == status_del_other
        return

    # ToDo: update tests: add ingredients.amount
    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_recipes_get(
            self,
            client_func: APIClient,
            create_recipes_ingredients_tags_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/recipes/"
        –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_recipes_ingredients_tags_users"
        –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å —Ç–µ–≥–∞–º–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏.
        –í –∫–ª–∞—Å—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –í —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑
        —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ "results" –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. –¢–µ—Å—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
        –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ "test_view_sets_pagination"."""
        expected_data: dict[str, any] = {
            'id': 3,
            'tags': [
                {'id': 3,
                 'name': 'test_tag_name_3',
                 'color': '#000003',
                 'slug': 'test_tag_slug_3'}],
            'author': {
                'email': 'test_user_email_3@email.com',
                'id': 3,
                'username': 'test_user_username_3',
                'first_name': 'test_user_first_name_3',
                'last_name': 'test_user_last_name_3',
                'is_subscribed': False},
            'ingredients': [{
                'id': 3,
                'name': 'test_ingredient_name_3',
                'measurement_unit': '–±–∞—Ç–æ–Ω',
                # 'amount': 3
            }],
            'is_favorited': False,
            'is_in_shopping_cart': False,
            'name': 'test_recipe_name_3',
            'image': (
               f'http://testserver/media/'
               f'{Recipes.objects.get(id=3).image.name}'),
            'text': 'test_recipe_text_3',
            'cooking_time': 3}
        client: APIClient = client_func()
        response = client.get(URL_RECIPES)
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        results_pagination: dict = data['results']
        assert results_pagination[0] == expected_data
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_recipes_get_pk(
            self,
            client_func: APIClient,
            create_recipes_ingredients_tags_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/recipes/{pk}/"
        –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_recipes_ingredients_tags_users"
        –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å —Ç–µ–≥–∞–º–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏.
        """
        expected_data: dict[str, any] = {
            'id': 1,
            'tags': [
                {'id': 1,
                 'name': 'test_tag_name_1',
                 'color': '#000001',
                 'slug': 'test_tag_slug_1'}],
            'author': {
                'email': 'test_user_email_1@email.com',
                'id': 1,
                'username': 'test_user_username_1',
                'first_name': 'test_user_first_name_1',
                'last_name': 'test_user_last_name_1',
                'is_subscribed': False},
            'ingredients': [{
                'id': 1,
                'name': 'test_ingredient_name_1',
                'measurement_unit': '–±–∞—Ç–æ–Ω',
            #     'amount': 1
            }],
            'is_favorited': False,
            'is_in_shopping_cart': False,
            'name': 'test_recipe_name_1',
            'image': (
               f'http://testserver/media/'
               f'{Recipes.objects.get(id=1).image.name}'),
            'text': 'test_recipe_text_1',
            'cooking_time': 1}
        client: APIClient = client_func()
        response = client.get(f'{URL_RECIPES}1/')
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        assert data == expected_data
        return

    def test_recipes_not_allowed_methods(self, create_recipes_users) -> None:
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ CRUD –∑–∞–ø—Ä–æ—Å—ã –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/recipes/":
            - PUT.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_recipes_users" –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å —Ç–µ–≥–∞–º–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏."""
        test_user: User = User.objects.get(id=1)
        token, _ = Token.objects.get_or_create(user=test_user)
        client: APIClient = anon_client()
        client.credentials(HTTP_AUTHORIZATION=f'Token {token}')
        response = client.put(f'{URL_RECIPES}1/')
        assert response.status_code == status.HTTP_405_METHOD_NOT_ALLOWED
        return

    # @pytest.mark.parametrize('user, response_code', [
    #     ('author', status.HTTP_200_OK),
    #     ('admin', status.HTTP_403_FORBIDDEN)])
    # def test_recipes_patch_allowed_method(
    #         self,
    #         user: str,
    #         response_code: status,
    #         create_recipes_ingredients_tags_users) -> None:
    #     """""–¢–µ—Å—Ç PATCH-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/recipes/{pk}/"
    #     –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    #     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_recipes_ingredients_tags_users"
    #     –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å —Ç–µ–≥–∞–º–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏."""
    #     ID_TO_PATCH: int = 1
    #     author_user: User = User.objects.get(id=ID_TO_PATCH)
    #     admin_user: User = User.objects.get(id=(ID_TO_PATCH+1))
    #     admin_user.is_staff = True
    #     admin_user.save()
    #     users: dict[str, User] = {
    #         'author': author_user,
    #         'admin': admin_user}
    #     token, _ = Token.objects.get_or_create(user=users[user])
    #     client: APIClient = anon_client()
    #     client.credentials(HTTP_AUTHORIZATION=f'Token {token}')
    #     response = client.patch(f'{URL_RECIPES}{ID_TO_PATCH}/')
    #     assert response.status_code == response_code
    #     return

    VALID_POST_DATA: dict = {
        'ingredients': [
            {
                'id': 1,
                'amount': 1},
            {
                'id': 2,
                'amount': 2}],
        'tags': [
            {
                'id': 1}],
        'image': 'None',
        'name': 'api_create_recipe',
        'text': 'created with post method',
        'cooking_time': 100}
    VALID_POST_DATA_EXP: dict = {
        'id': 1,
        'tags': [
            {'id': 1,
             'name': 'test_tag_name_1',
             'color': '#000001',
             'slug': 'test_tag_slug_1'}],
        'author': {
            'email': 'test_user_email_1@email.com',
            'id': 1,
            'username': 'test_user_username_1',
            'first_name': 'test_user_first_name_1',
            'last_name': 'test_user_last_name_1',
            'is_subscribed': False},
        'ingredients': [
            {'id': 1,
             'name': 'test_ingredient_name_1',
             'measurement_unit': '–±–∞—Ç–æ–Ω',
             'amount': 1},
            {'id': 2,
             'name': 'test_ingredient_name_2',
             'measurement_unit': '–±–∞—Ç–æ–Ω',
             'amount': 2}],
        'is_favorited': False,
        'is_in_shopping_cart': False,
        'name': 'api_create_recipe',
        'image': None,
        'text': 'created with post method',
        'cooking_time': 100.5}

    # ToDo: fix test
    # @pytest.mark.parametrize('data, expected_data', [
    #     (VALID_POST_DATA, VALID_POST_DATA_EXP)])
    # def test_recipes_post_allow_create(
    #         self,
    #         data: dict,
    #         expected_data: dict,
    #         create_users) -> None:
    #     """–¢–µ—Å—Ç POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
    #     "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    #     –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≤–µ–¥–æ–º–æ –≤–∞–ª–∏–¥–Ω—ã–º–∏.
    #     –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î:
    #         - create_tags: —Ç–µ–≥–∏;
    #         - create_ingredients: –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã."""
    #     client: APIClient = anon_client()
    #     test_user: User = User.objects.get(id=1)
    #     token, _ = Token.objects.get_or_create(user=test_user)
    #     client.credentials(HTTP_AUTHORIZATION=f'Token {token}')
    #     assert Recipes.objects.all().count() == 0
    #     response = client.post(
    #         URL_RECIPES, json.dumps(data), content_type='application/json')
    #     #assert response.status_code == status.HTTP_201_CREATED
    #     #data = json.loads(response.content)
    #     assert response.content == 1

    @pytest.mark.parametrize('user, response_code', [
        ('auth_user', status.HTTP_405_METHOD_NOT_ALLOWED),
        ('anon_user', status.HTTP_401_UNAUTHORIZED)])
    def test_tags_put_allowed_method(
            self, user: str, response_code: status, create_users) -> None:
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ CRUD –∑–∞–ø—Ä–æ—Å—ã –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/tags/":
            - PUT."""
        auth_user = User.objects.get(id=1)
        token, _ = Token.objects.get_or_create(user=auth_user)
        users_tokens: dict[str, User] = {
            'auth_user': token,
            'anon_user': ''}
        client: APIClient = anon_client()
        client.credentials(HTTP_AUTHORIZATION=f'Token {users_tokens[user]}')
        response = client.put(f'{URL_RECIPES}1/')
        assert response.status_code == response_code
        return


@pytest.mark.django_db
class TestTagsViewSet():
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç –≤—å—é-—Å–µ—Ç–∞ "TagsViewSet"."""

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_tags_get(self, client_func, create_tags) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/tags/"
        –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_tags" –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π
        –ë–î —Ç–µ–≥–∞–º–∏.
        –í –∫–ª–∞—Å—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –í —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑
        —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ "results" –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. –¢–µ—Å—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
        –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ "test_view_sets_pagination"."""
        expected_data: dict[str, any] = {
            'id': 1,
            'name': 'test_tag_name_1',
            'color': '#000001',
            'slug': 'test_tag_slug_1'}
        client = client_func()
        response = client.get(URL_TAGS)
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        results_pagination: dict = data['results']
        assert results_pagination[0] == expected_data
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_tags_get_pk(self, client_func, create_tags) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ–≥ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/users/{pk}/"
        –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_tags" –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π
        –ë–î —Ç–µ–≥–∞–º–∏."""
        client = client_func()
        response = client.get(f'{URL_TAGS}1/')
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        assert data == {
            'id': 1,
            'name': 'test_tag_name_1',
            'color': '#000001',
            'slug': 'test_tag_slug_1'}
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    @pytest.mark.parametrize('method', ['delete', 'patch', 'post', 'put'])
    def test_tags_not_allowed_methods(self, client_func, method) -> None:
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ CRUD –∑–∞–ø—Ä–æ—Å—ã –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É "/api/v1/tags/":
            - DELETE;
            - PATCH;
            - POST;
            - PUT."""
        client: APIClient = client_func()
        response = getattr(client, method)(URL_TAGS)
        assert response.status_code == status.HTTP_405_METHOD_NOT_ALLOWED
        return


@pytest.mark.django_db
@pytest.mark.parametrize('url', [URL_RECIPES, URL_TAGS, URL_USERS])
def test_view_sets_pagination(
        url, create_recipes_users, create_tags) -> None:
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—å—é—Å–µ—Ç–æ–≤:
        - CustomUserViewSet;
        - RecipesViewSet;
        - TagsViewSet.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î:
        "create_recipes_users" - —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏;
        "create_tags" - —Ç–µ–≥–∞–º–∏."""
    client: APIClient = auth_client()
    response = client.get(url)
    data: dict = json.loads(response.content)
    assert list(data) == ['count', 'next', 'previous', 'results']


# ToDo: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–∫—Å—Ç—É—Ä–∞
# "test_override_media_root" (–∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é
# –≤ –º–æ–¥–µ–ª–∏) –∏–∑ test_models.py –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã —Ç–æ—á–µ—á–Ω–æ
# –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-–∫–∞—Ç–∞–ª–æ–≥–µ.
def test_delete_temp_media_images() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω—ã —É–¥–∞–ª–µ–Ω—ã."""
    folder_path: Path = settings.MEDIA_ROOT / RECIPES_MEDIA_ROOT
    for filename in os.listdir(folder_path):
        if filename.startswith('test_image_') and filename.endswith('.gif'):
            file_path = os.path.join(folder_path, filename)
            os.remove(file_path)
    test_media_files = [
        filename for filename in os.listdir(folder_path)
        if filename.startswith('test') and filename.endswith('.gif')]
    assert len(test_media_files) == 0
