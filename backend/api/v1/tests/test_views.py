
import json

import pytest
from django.contrib.auth.models import User
from rest_framework import status
from rest_framework.test import APIClient

from api.v1.serializers import (
    USER_EMAIL_MAX_LEN, USER_FIRST_NAME_MAX_LEN, USER_PASSWORD_MAX_LEN,
    USER_SECOND_NAME_MAX_LEN, USER_USERNAME_MAX_LEN)

USERS_URL: str = '/api/v1/users/'

TEST_USER: User = lambda i: User.objects.create(
    email=f'test_user_{i}@email.com',
    username=f'test_user_{i}',
    first_name=f'test_user_{i}_first_name',
    last_name=f'test_user_{i}_last_name')
TEST_USERS_COUNT: int = 3


@pytest.fixture()
def create_users() -> None:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    for i in range(TEST_USERS_COUNT):
        TEST_USER(i+1)
    return


@pytest.mark.django_db
class TestCustomUserViewSet():
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç –≤—å—é-—Å–µ—Ç–∞ "CustomUserViewSet"."""

    VALID_POST_DATA = {
        'email': f'{"1"*(USER_EMAIL_MAX_LEN-len("@email.com"))}@email.com',
        'username': f'{"1"*USER_USERNAME_MAX_LEN}',
        'first_name': f'{"1"*USER_FIRST_NAME_MAX_LEN}',
        'last_name': f'{"1"*USER_SECOND_NAME_MAX_LEN}',
        'password': f'{"1"*USER_PASSWORD_MAX_LEN}'}
    VALID_POST_DATA_EXP = {
        'email': f'{"1"*(USER_EMAIL_MAX_LEN-len("@email.com"))}@email.com',
        'id': 1,
        'username': f'{"1"*USER_USERNAME_MAX_LEN}',
        'first_name': f'{"1"*USER_FIRST_NAME_MAX_LEN}',
        'last_name': f'{"1"*USER_SECOND_NAME_MAX_LEN}',
        'is_subscribed': False}
    NON_VALID_POST_DATA_LENGTH = {
        'email': f'{"1"*(USER_EMAIL_MAX_LEN-len("@email.com")+1)}@email.com',
        'username': f'{"1"*(USER_USERNAME_MAX_LEN+1)}',
        'first_name': f'{"1"*(USER_FIRST_NAME_MAX_LEN+1)}',
        'last_name': f'{"1"*(USER_SECOND_NAME_MAX_LEN+1)}',
        'password': f'{"1"*(USER_PASSWORD_MAX_LEN+1)}'}
    NON_VALID_POST_DATA_LENGTH_EXP = {
        'email': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 254 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'username': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'first_name': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'last_name': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.'],
        'password': [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.']}
    NON_VALID_POST_DATA_EMPTY = {}
    NON_VALID_POST_DATA_EMPTY_EXP = {
        'email': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'username': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'first_name': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'last_name': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.'],
        'password': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.']}
    NON_VALID_POST_DATA_EMAIL = {
        'email': 'None',
        'username': 'test_username',
        'first_name': 'test_first_name',
        'last_name': 'test_last_name',
        'password': 'test_username'}
    NON_VALID_POST_DATA_EMAIL_EXP = {
        'email': ['–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.']}
    NON_VALID_POST_DATA_USERNAME = {
        'email': 'test@email.com',
        'username': '12345!!!üòä',
        'first_name': 'test_first_name',
        'last_name': 'test_last_name',
        'password': 'test_password'}
    NON_VALID_POST_DATA_USERNAME_EXP = {
        'username': [
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "!", "1", "2", "3", "4", "5", "üòä" –≤ –∏–º–µ–Ω–∏ '
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ.']}
    NON_VALID_POST_DATA_EXISTED = {
        'email': 'test_user_1@email.com',
        'username': 'test_user_1',
        'first_name': 'test_user_1_first_name',
        'last_name': 'test_user_1_last_name',
        'password': 'test_user_1_password'}
    NON_VALID_POST_DATA_EXISTED_EXP = {
        'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'],
        'username': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.']}

    def auth_client(self) -> APIClient:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤."""
        auth_client = APIClient()
        auth_client.force_authenticate(user=None)
        return auth_client

    def anon_client(self) -> APIClient:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        return APIClient()

    def users_get(self, client) -> None:
        """–°–æ–≤–µ—Ä—à–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–º –¥–∞–Ω–Ω—ã–º
        (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞)."""
        response = client.get(USERS_URL)
        assert response.status_code == status.HTTP_200_OK
        data: dict = json.loads(response.content)
        assert len(data) == TEST_USERS_COUNT
        expected_data = [
            {'email': 'test_user_1@email.com',
             'id': 1,
             'username': 'test_user_1',
             'first_name': 'test_user_1_first_name',
             'last_name': 'test_user_1_last_name',
             'is_subscribed': False},
            {'email': 'test_user_2@email.com',
             'id': 2,
             'username': 'test_user_2',
             'first_name': 'test_user_2_first_name',
             'last_name': 'test_user_2_last_name',
             'is_subscribed': False},
            {'email': 'test_user_3@email.com',
             'id': 3,
             'username': 'test_user_3',
             'first_name': 'test_user_3_first_name',
             'last_name': 'test_user_3_last_name',
             'is_subscribed': False}]
        assert data == expected_data
        return

    def users_post(
            self,
            client: APIClient,
            data: dict[str, any],
            expected_data: dict[str, any],
            expected_status: status,
            expected_users_count: int) -> None:
        """–°–æ–≤–µ—Ä—à–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        response = client.post(
            USERS_URL, json.dumps(data), content_type='application/json')
        assert response.status_code == expected_status
        assert User.objects.all().count() == expected_users_count
        data: dict = json.loads(response.content)
        assert data == expected_data
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_delete_not_allowed(self, client_func):
        """–¢–µ—Å—Ç DELETE-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        client: APIClient = client_func(self)
        response = client.delete(
            USERS_URL, json.dumps({}), content_type='application/json')
        assert response.status_code == status.HTTP_405_METHOD_NOT_ALLOWED
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_get(self, client_func, create_users) -> None:
        """–¢–µ—Å—Ç GET-–∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ "create_users" –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π
        –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        self.users_get(client=client_func(self))
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_patch_not_allowed(self, client_func) -> None:
        """–¢–µ—Å—Ç PATCH-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        client: APIClient = client_func(self)
        response = client.patch(
            USERS_URL, json.dumps({}), content_type='application/json')
        assert response.status_code == status.HTTP_405_METHOD_NOT_ALLOWED
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_post_allow_create(self, client_func) -> None:
        """–¢–µ—Å—Ç POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≤–µ–¥–æ–º–æ –≤–∞–ª–∏–¥–Ω—ã–º–∏."""
        self.users_post(
            client=client_func(self),
            data=self.VALID_POST_DATA,
            expected_data=self.VALID_POST_DATA_EXP,
            expected_status=status.HTTP_201_CREATED,
            expected_users_count=1)
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    @pytest.mark.parametrize('data, expected_data', [
        (NON_VALID_POST_DATA_EMPTY, NON_VALID_POST_DATA_EMPTY_EXP),
        (NON_VALID_POST_DATA_LENGTH, NON_VALID_POST_DATA_LENGTH_EXP),
        (NON_VALID_POST_DATA_EMAIL, NON_VALID_POST_DATA_EMAIL_EXP),
        (NON_VALID_POST_DATA_USERNAME, NON_VALID_POST_DATA_USERNAME_EXP),
        (NON_VALID_POST_DATA_EXISTED, NON_VALID_POST_DATA_EXISTED_EXP)])
    def test_users_post_field_validation(
            self, client_func, data, expected_data, create_users) -> None:
        """–¢–µ—Å—Ç POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏."""
        self.users_post(
            client=client_func(self),
            data=data,
            expected_data=expected_data,
            expected_status=status.HTTP_400_BAD_REQUEST,
            expected_users_count=TEST_USERS_COUNT)
        return

    @pytest.mark.parametrize('client_func', [anon_client, auth_client])
    def test_users_put_not_allowed(self, client_func) -> None:
        """–¢–µ—Å—Ç PUT-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–º–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        "/api/v1/users/" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        client: APIClient = client_func(self)
        response = client.put(
            USERS_URL, json.dumps({}), content_type='application/json')
        assert response.status_code == status.HTTP_405_METHOD_NOT_ALLOWED
        return
